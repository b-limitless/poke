{"version":3,"file":"static/js/407.429b0153.chunk.js","mappings":"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","sources":["components/Button/style.ts","components/Button/LoadingButton.tsx","components/Input/style.ts","components/Input/Input.tsx","components/Input/InputAdornments.tsx","common/DynamicForm/index.tsx","components/Help/ErrorText.tsx","functions/validateForm.ts","pages/auth/signin/signin.tsx","utils/regrex.ts","pages/auth/user-schema.ts"],"sourcesContent":["import { colors } from \"config/colors\";\n\nexport type variantType = \"primary\" | \"secondary\" | \"light\";\n\nexport const styles = (variant: variantType) => {\n  let background =\n    variant === \"primary\"\n      ? colors.primary\n      : variant === \"secondary\"\n      ? colors.secondary\n      : variant === \"light\";\n  let color =\n    variant === \"primary\"\n      ? colors.light\n      : variant === \"secondary\"\n      ? colors.primary\n      : colors.secondary;\n\n  const optionalProps = {} as any;\n\n  if (variant === \"primary\") {\n    optionalProps.border = `1px solid ${colors.primary}`;\n  }\n\n  return {\n    background: background,\n    borderRadius: \"6px\",\n    padding: \"12px 22px\",\n    color: color,\n    opacity: 0.9,\n    fontFamily: \"Figtree, sans-serif\",\n    fontSize: \"16px\",\n    lineHeight: \"20px\",\n    \"&:hover\": {\n      backgroundColor: background,\n      opacity: 1,\n    },\n    ...optionalProps,\n  };\n};","import { LoadingButton } from '@mui/lab';\nimport React from 'react';\nimport { styles, variantType } from './style';\n\ninterface CustomLoadingButtonProps {\n  onClick: () => void;\n  loading: boolean;\n  loadingPosition?: 'start' | 'end';\n  variant?: 'text' | 'outlined' | 'contained';\n  children: React.ReactNode;\n  color?: 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning';\n  disabled?: boolean;\n  type: variantType;\n}\n\nconst CustomLoadingButton: React.FC<CustomLoadingButtonProps> = ({\n  onClick,\n  loading,\n  loadingPosition = 'start',\n  variant = 'contained',\n  children,\n  color = 'primary',\n  disabled = false,\n  type\n}) => {\n  return (\n    <LoadingButton\n      onClick={onClick}\n      loading={loading}\n      loadingPosition={loadingPosition}\n      variant={variant}\n      color={color}\n      disabled={disabled || loading}\n      sx={styles(type)}\n    >\n      {children}\n    </LoadingButton>\n  );\n};\n\nexport default CustomLoadingButton;\n","import { colors } from \"config/colors\";\n\nexport const style: any = {\n  \"&.MuiFormControl-root\": {\n    width: \"100%\",\n    fontFamily: \"Poppins, sans-serif !important\",\n  },\n  \"& .MuiInputLabel-root\": {\n    fontFamily: \"Poppins, sans-serif !important\",\n  },\n\n  \"& .MuiInputBase-input\": {\n    borderRadius: \"6px\",\n    fontWeight: \"400\",\n    fontSize: \"14px\",\n    lineHeight: \"24px\",\n    letterSpacing: \"0.5px\",\n    color: \"rgba(0, 0, 0, 0.87)\",\n    width: \"100%\",\n    fontFamily: \"Poppins, sans-serif !important\",\n  },\n\n  \"& .MuiInputLabel-root.Mui-focused\": {\n    color: colors.primary,\n    backgroundColor: \"#fff\",  // Add a background to make the label shift up clearly\n    padding: \"0 5px\",  // Optional padding adjustment to make the label shift more cleanly\n  },\n\n  // Focus state of the input underline\n  \"& .MuiOutlinedInput-root\": {\n    \"& fieldset\": {\n      borderColor: colors.lightGray,\n    },\n    \"&:hover fieldset\": {\n      borderColor: colors.lightGray,\n    },\n    \"&.Mui-focused fieldset\": {\n      borderWidth: \"1px\",\n      borderColor: colors.primary,\n    },\n  },\n\n  // When helper text is present, style the text\n  \"& .MuiFormHelperText-root\": {\n    fontFamily: \"Poppins, sans-serif !important\",\n  },\n\n  // Make sure the helper text is styled correctly\n  \"& .MuiFormHelperText-root.Mui-error\": {\n    color: colors.red,\n  },\n};\n\n","import React from \"react\";\nimport { TextField } from \"@mui/material\";\nimport { style } from \"./style\";\n\ninterface InputInterfae {\n  [x: string]: any;\n}\n\nexport default function Input({ ...rest }: InputInterfae) {\n  return <TextField sx={style} size=\"medium\" {...rest} ></TextField>;\n}\n","import { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { FormHelperText, FormControl, IconButton, InputAdornment, InputLabel, OutlinedInput } from \"@mui/material\";\nimport * as React from \"react\";\nimport { colors } from \"config/colors\";\nimport { style } from \"./style\";\n\ninterface InputAdornmentsProps {\n  formControlProps?: any; // You can define a more specific type if you know the structure\n  label?: string; // Optional label prop\n  error?: boolean; // Optional error prop\n  helperText?: string; // Optional helper text prop\n  [key: string]: any; // Allow other props\n}\n\nexport default function InputAdornments({\n  formControlProps = {},\n  label,\n  error,\n  helperText,\n  ...props\n}: InputAdornmentsProps) {\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const handleClickShowPassword = () => setShowPassword((show) => !show);\n\n  const handleMouseDownPassword = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    event.preventDefault();\n  };\n\n  return (\n    <FormControl {...formControlProps} variant=\"outlined\" sx={{...style, marginTop: '8px'}}>\n      <InputLabel htmlFor=\"outlined-adornment-password\">{label}</InputLabel>\n      <OutlinedInput\n        {...props}\n        id=\"password-field\"\n        type={showPassword ? \"text\" : \"password\"}\n        size=\"medium\"\n        endAdornment={\n          <InputAdornment position=\"end\">\n            <IconButton\n              aria-label=\"toggle password visibility\"\n              onClick={handleClickShowPassword}\n              onMouseDown={handleMouseDownPassword}\n              edge=\"end\"\n            >\n              {showPassword ? <VisibilityOff /> : <Visibility />}\n            </IconButton>\n          </InputAdornment>\n        }\n      />\n      {error && (\n        <FormHelperText sx={{ color: colors.red }}>\n          {helperText}\n        </FormHelperText>\n      )}\n    </FormControl>\n  );\n}\n","import { Grid2 } from \"@mui/material\";\nimport CustomLoadingButton from \"components/Button/LoadingButton\";\nimport { Input, InputAdornments } from \"components/Input\";\n\ninterface FieldSchema {\n  field: string;\n  label: string;\n  type: \"text\" | \"textarea\" | \"button\" | \"password\";\n  colSpan: number;\n}\n\ninterface DynamicFormProps {\n  formData: { [key: string]: any };\n  setFormData: React.Dispatch<React.SetStateAction<{ [key: string]: any }>>;\n  formSchema: FieldSchema[];\n  handleSubmit: () => void;\n  validateForm: () => boolean;\n  errors: { [key: string]: string | undefined };\n  saving: boolean;\n}\n\nconst DynamicForm: React.FC<DynamicFormProps> = ({\n  formData,\n  setFormData,\n  formSchema,\n  handleSubmit,\n  errors,\n  saving,\n}) => {\n  return (\n    <Grid2 container>\n      {formSchema.map((field, index) => {\n        const error = errors[field.field];\n\n        return (\n          <Grid2\n            key={index}\n            component=\"div\"\n            size={{ xs: 12, md: field.colSpan }}\n          >\n            {field.type === \"text\" && (\n              <Input\n                label={field.label}\n                name={field.field}\n                value={formData[field.field] || \"\"}\n                onChange={(e: any) =>\n                  setFormData({ ...formData, [field.field]: e.target.value })\n                }\n                fullWidth\n                margin=\"dense\"\n                error={!!error}\n                helperText={error}\n              />\n            )}\n\n            {field.type === \"password\" && (\n              <InputAdornments\n                label={field.label}\n                name={field.field}\n                value={formData[field.field] || \"\"}\n                onChange={(e: any) =>\n                  setFormData({ ...formData, [field.field]: e.target.value })\n                }\n                fullWidth\n                margin=\"dense\"\n                error={!!error}\n                helperText={error}\n              />\n            )}\n\n            {field.type === \"button\" && (\n              <Grid2\n                container\n                justifyContent=\"flex-end\"\n                component=\"div\"\n                mt={\"2rem\"}\n              >\n                <CustomLoadingButton\n                  onClick={handleSubmit}\n                  loading={saving}\n                  // loadingPosition=\"start\"\n                  variant=\"contained\"\n                  type=\"primary\"\n                >\n                  {field.label}\n                </CustomLoadingButton>\n              </Grid2>\n            )}\n          </Grid2>\n        );\n      })}\n    </Grid2>\n  );\n};\n\nexport default DynamicForm;\n","interface IFormHelperText {\n  text: string | null;\n  style?: any;\n}\n\nconst myStyles: any = {\n  fontFamily: \"Poppins, san-sarif !important\",\n  fontWeight: 400,\n  fontSize: \"1rem\",\n  lineHeight: 1.66,\n  letterSpacing: \"0.03333em\",\n  textAlign: \"left\",\n  marginTop: \"3px\",\n  marginRight: \"14px\",\n  marginBottom: 0,\n  marginLeft: \"14px\",\n  color: \"#d32f2f\",\n};\n\nexport default function ErrorText({ text, style }: IFormHelperText) {\n  return <div style={{ ...myStyles, ...style }}>{text}</div>;\n}\n","export const validateFormGlobal = (schema: any[], formData: any) => {\n  const newErrors: any = {};\n  schema.forEach((field: any) => {\n    const value = formData[field.field];\n\n    // Check if regex exists and validate value with regex\n    if (field.regex && !field.regex.test(value)) {\n      newErrors[field.field] = field.errorMessage || \"Invalid value\";\n    }\n\n    // Check for required fields if specified\n    if (field.required && !value) {\n      newErrors[field.field] = `${field.label} is required`;\n    }\n  });\n\n  return newErrors as any;\n};\n","import { useMutation } from \"@tanstack/react-query\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport DynamicForm from \"common/DynamicForm\";\nimport ErrorText from \"components/Help/ErrorText\";\nimport { request } from \"utils/request\";\nimport \"../auth.scss\";\nimport { signinSchema } from \"../user-schema\";\nimport { APIs } from \"utils/apis\";\nimport { validateFormGlobal } from \"functions/validateForm\";\n\nconst signInUser = async (formData: any) => {\n  try {\n    // Submit the form to service\n    await request({\n      url: APIs.auth.signin,\n      method: \"post\",\n      body: formData,\n    });\n  } catch (err) {\n    if (axios.isAxiosError(err) && err.response) {\n      throw err.response.data; // Pass the error response data to be accessible in useMutation\n    } else {\n      throw new Error(\"An unknown error occurred\");\n    }\n  }\n};\n\n\nexport default function Signin() {\n  const navigate = useNavigate();\n\n  const [formData, setFormData] = useState<any>({\n    email: \"\",\n    name: \"\",\n   \n  });\n  const [errors, setErrors] = useState<any>({\n    email: \"\",\n    name: \"\",\n  });\n\n  const {\n    mutate: signInUserMutation,\n    isPending,\n    isError,\n    error,\n  } = useMutation({\n    mutationFn: signInUser,\n    onSuccess: () => {\n      navigate(\"/\");\n      // Perform any other success actions here\n    },\n  });\n\n  const handleSubmit = () => {\n    signInUserMutation(formData);\n  };\n\n  const validateForm = () => {\n    const newErrors: any = validateFormGlobal(signinSchema, formData);\n    return newErrors as any;\n  };\n\n  const onSubmit = () => {\n    // Validate the form data before submitting\n    const validationErrors = validateForm();\n    setErrors(validationErrors);\n\n    // If there are no validation errors, proceed with submission\n    if (Object.keys(validationErrors).length === 0) {\n      handleSubmit();\n    }\n  };\n\n  return (\n    <>\n      <div className=\"form_container\">\n      \n        <div>\n        {isError && (\n          <ErrorText \n          style={{padding: '1rem 0 1rem 0', textAlign:'center'}}\n          text={error?.message || \"Something went wrong\"} />\n        )}\n\n        <div className=\"form\">\n          <DynamicForm\n            formSchema={signinSchema}\n            setFormData={setFormData}\n            formData={formData}\n            handleSubmit={onSubmit}\n            validateForm={validateForm}\n            errors={errors}\n            saving={isPending}\n          />\n\n          <div className=\"navigate_helper\">\n            <span className=\"already\">Create an account ? <Link to='/signup'>Signup</Link></span>\n          </div>\n        </div>\n\n        </div>\n       \n      </div>\n    </>\n  );\n}\n","export const emailRegex = /^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/;\nexport const passwordRegex =\n  /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\nexport const validString = /^[\\w\\- ]{1,100}$/;\n","import { emailRegex, passwordRegex, validString } from \"utils/regrex\";\n\nexport const baseUserSchema: any = [\n  {\n    field: \"email\",\n    label: \"Email\",\n    type: \"text\",\n    colSpan: 12,\n    regex: emailRegex,\n    errorMessage: \"Please provide valid email address.\",\n  },\n  {\n    field: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    colSpan: 12,\n    regex: passwordRegex,\n    errorMessage:\n      \"Password must be at least 8 characters and include a letter, a number, and a special character.\",\n  },\n];\nexport const userSchema: any = [\n  \n\n  ...baseUserSchema,\n\n  {\n    label: \"Signup\",\n    field: \"submit\",\n    type: \"button\",\n    colSpan: 12,\n  },\n];\n\nexport const signinSchema = [\n  ...baseUserSchema,\n  {\n    label: \"Signin\",\n    field: \"submit\",\n    type: \"button\",\n    colSpan: 12,\n  },\n];\n"],"names":["styles","variant","background","colors","primary","secondary","color","light","optionalProps","border","borderRadius","padding","opacity","fontFamily","fontSize","lineHeight","backgroundColor","_ref","onClick","loading","loadingPosition","children","disabled","type","_jsx","LoadingButton","sx","style","width","fontWeight","letterSpacing","borderColor","lightGray","borderWidth","red","Input","rest","TextField","size","InputAdornments","formControlProps","label","error","helperText","props","showPassword","setShowPassword","React","_jsxs","FormControl","marginTop","InputLabel","htmlFor","OutlinedInput","id","endAdornment","InputAdornment","position","IconButton","handleClickShowPassword","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","FormHelperText","formData","setFormData","formSchema","handleSubmit","errors","saving","Grid2","container","map","field","index","component","xs","md","colSpan","name","value","onChange","e","target","fullWidth","margin","justifyContent","mt","CustomLoadingButton","myStyles","textAlign","marginRight","marginBottom","marginLeft","ErrorText","text","validateFormGlobal","schema","newErrors","forEach","regex","test","errorMessage","required","signInUser","async","request","url","APIs","auth","signin","method","body","err","axios","isAxiosError","response","data","Error","Signin","navigate","useNavigate","useState","email","setErrors","mutate","signInUserMutation","isPending","isError","useMutation","mutationFn","onSuccess","validateForm","signinSchema","_Fragment","className","message","DynamicForm","onSubmit","validationErrors","Object","keys","length","Link","to","baseUserSchema","userSchema"],"sourceRoot":""}